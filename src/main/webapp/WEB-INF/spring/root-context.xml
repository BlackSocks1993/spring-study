<?xml version="1.0" encoding="UTF-8"?>
<!-- bean 스키마는 디폴트 네임스페이스이므로 접두어 없이 사용할 수 있다. -->
<!-- aop 스키마는 aop 네임스페이스를 가지므로 접두어를 사용한다. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						">

	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="org.mariadb.jdbc.Driver" />
		<property name="url" value="jdbc:mariadb://localhost:3306/spring?characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="0000" />
	</bean>

	<!--
	<bean id="userService" class="com.spring.study.user.service.TxProxyFactoryBean">
		<property name="target" ref="userServiceImpl" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="pattern" value="upgradeLevels" />
		<property name="serviceInterface" value="com.spring.study.user.service.UserService" />
	</bean>
	-->

	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />  
	</bean>

	<tx:annotation-driven />

	<!--
	등록된 빈 중에서 Advisor 인터페이스를 구현한 것을 모두 찾는다.
	그리고 생성되는 모든 빈애 대해 어드바이저의 포인트컷을 적용해보면서 프록시 적용 대상을 선정한다.
	 -->
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" /> -->

	<!--
	<bean id="txAdvice" class="com.spring.study.user.service.TxAdvice">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	-->

	<!--
	<bean id="txPointcut" class="com.spring.study.user.service.NameMatchClassMethodPointcut">
		<property name="mappedClassName" value="*ServiceImpl" />
		<property name="mappedName" value="upgrade*" />
	</bean>
	-->

	<!--
	<bean id="txPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
		<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))"/>
	</bean> 
	-->

	<!--
	<bean id="txPointcut" class="org.springframework.aop.support.NameMatchMethodPointcut">
		<property name="mappedName" value="upgrade*" />
	</bean>
	-->

	<!--
	<bean id="txAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
		<property name="advice" ref="txAdvice" />
		<property name="pointcut" ref="txPointcut" />
	</bean>
	-->
	
	<!-- AOP 설정을 담는 부모 태그다. 필요에 따라 AspectJAdvisorAutoProxyCreator를 빈으로 등록해준다. -->
	<!--
	<aop:config>
		<aop:pointcut expression="execution(* *..*ServiceImpl.upgrade*(..))" id="txPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	-->
	<!-- 
	<aop:config>
		빈 이름을 사용한 표현식을 갖는 포인트컷과 어드바이저
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* *..*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut="bean(*Service)" />
	</aop:config>
	-->

	<!--
	이 태그에 의해서 TransactionInterceptor 빈이 등록된다.
	transaction-manager="트랜잭션 매니저의 빈 아이디가 transactionManager라면 생략 가능 "
	-->
	<!--
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30" />
			<tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	-->

	<!--
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
			<tx:method name="get*" read-only="true" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	-->

	<!--
	<bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="userServiceImpl" />
		<property name="interceptorNames">
			<list>
				<value>txAdvisor</value>
			</list>
		</property>
	</bean>
	-->

	<!--### application components ###-->
	<bean id="userDao" class="com.spring.study.user.dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="userService" class="com.spring.study.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />
	</bean>

	<!--
	스태틱 멤버 클래스는 $로 지정한다.
	프로퍼티 정의를 포함해서 userService빈의 설정을 상속받는다.
	-->
	<bean id="testUserService" class="com.spring.study.user.service.UserServiceTest$TestUserService" parent="userService" />

	<!-- 
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="mail.server.com" />
	</bean>
	 -->
	<bean id="mailSender" class="com.spring.study.user.service.DummyMailSender" />

</beans>
